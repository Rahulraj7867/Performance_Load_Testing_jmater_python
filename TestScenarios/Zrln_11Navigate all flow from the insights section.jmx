<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Zrln_11Navigate all flow from the insights section">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="host" elementType="Argument">
            <stringProp name="Argument.name">host</stringProp>
            <stringProp name="Argument.value">idfc-insights.zykrr.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="scheme" elementType="Argument">
            <stringProp name="Argument.name">scheme</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <stringProp name="HTTPSampler.domain">idfc-insights.zykrr.com</stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.implementation"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group">
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <RecordingController guiclass="RecordController" testclass="RecordingController" testname="Navigate_all_flow_from_the insights section "/>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="247 - /api/login ()">
              <stringProp name="HTTPSampler.domain">idfc-auth.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/login</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://idfc-accounts.zykrr.com/</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://idfc-accounts.zykrr.com</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="password" elementType="Header">
                    <stringProp name="Header.name">password</stringProp>
                    <stringProp name="Header.value">daad78bd</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json;charset=utf-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="username" elementType="Header">
                    <stringProp name="Header.name">username</stringProp>
                    <stringProp name="Header.value">testing_aws@zykrr.com</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Regular Expression Extractor">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">token</stringProp>
                <stringProp name="RegexExtractor.regex">&quot;token&quot;:&quot;(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <boolProp name="RegexExtractor.default_empty_value">false</boolProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="269 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;organizationList&quot;,&quot;variables&quot;:{},&quot;query&quot;:&quot;query organizationList {\n  organizations: getOrganizationList\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">organizationList</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query organizationList {
  organizations: getOrganizationList
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="271 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;preferenceName&quot;:&quot;CAMPAIGN_PINNED&quot;},&quot;query&quot;:&quot;query ($preferenceName: String!) {\n  getUserPreference(preferenceName: $preferenceName)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($preferenceName: String!) {
  getUserPreference(preferenceName: $preferenceName)
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;preferenceName&quot;:&quot;CAMPAIGN_PINNED&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="272 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qy001ec&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query qy001ec($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    isEscalationConfigured\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qy001ec</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qy001ec($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    isEscalationConfigured
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="274 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q05e4b7b3&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query q05e4b7b3($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    organizationId\n    genericTranslationDetails {\n      selectedLanguages\n      allLanguages\n      __typename\n    }\n    hasNetSatisfactionScoreQuestion\n    hasOpenEndedQuestion\n    huddleConfiguration\n    questionHierarchy {\n      questionId\n      parentQuestionId\n      __typename\n    }\n    isEscalationConfigured\n    isTabAuthorised\n    type\n    name\n    logo\n    tabsConfiguration {\n      tabName\n      nameToShow\n      status\n      __typename\n    }\n    isBajajSpecificFeatureEnabled\n    __typename\n  }\n  getCampaignsEnabledForPrecalculation\n  getIncludedQuestionTypeForCampaign(campaignId: $campaignId)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q05e4b7b3</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q05e4b7b3($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    organizationId
    genericTranslationDetails {
      selectedLanguages
      allLanguages
      __typename
    }
    hasNetSatisfactionScoreQuestion
    hasOpenEndedQuestion
    huddleConfiguration
    questionHierarchy {
      questionId
      parentQuestionId
      __typename
    }
    isEscalationConfigured
    isTabAuthorised
    type
    name
    logo
    tabsConfiguration {
      tabName
      nameToShow
      status
      __typename
    }
    isBajajSpecificFeatureEnabled
    __typename
  }
  getCampaignsEnabledForPrecalculation
  getIncludedQuestionTypeForCampaign(campaignId: $campaignId)
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="277 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q5bfc8970&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query q5bfc8970($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    name\n    childrenCampaigns {\n      id\n      name\n      __typename\n    }\n    type\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q5bfc8970</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q5bfc8970($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    name
    childrenCampaigns {
      id
      name
      __typename
    }
    type
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="276 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q5bfc8970&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query q5bfc8970($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    name\n    genericTranslationDetails {\n      selectedLanguages\n      allLanguages\n      __typename\n    }\n    childrenCampaigns {\n      id\n      name\n      __typename\n    }\n    type\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q5bfc8970</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q5bfc8970($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    name
    genericTranslationDetails {
      selectedLanguages
      allLanguages
      __typename
    }
    childrenCampaigns {
      id
      name
      __typename
    }
    type
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="275 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q05e4b7a2&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;isWithOptions&quot;:false},&quot;query&quot;:&quot;query q05e4b7a2($campaignId: ID!, $isWithOptions: Boolean) {\n  questionnaire(campaignId: $campaignId, isWithOptions: $isWithOptions)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q05e4b7a2</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q05e4b7a2($campaignId: ID!, $isWithOptions: Boolean) {
  questionnaire(campaignId: $campaignId, isWithOptions: $isWithOptions)
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;isWithOptions&quot;:false}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="281 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q2a3b68b5&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query q2a3b68b5($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    hasNetPromoterScoreQuestion\n    metricConfig {\n      id\n      campaignId\n      type\n      promoterLabel\n      detractorLabel\n      passiveLabel\n      metricLabel\n      metricLabelShort\n      rangeEnd\n      rangeStart\n      detractorUpperRange\n      promoterLowerRange\n      __typename\n    }\n    defaultDateFilterRange\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q2a3b68b5</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q2a3b68b5($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    hasNetPromoterScoreQuestion
    metricConfig {
      id
      campaignId
      type
      promoterLabel
      detractorLabel
      passiveLabel
      metricLabel
      metricLabelShort
      rangeEnd
      rangeStart
      detractorUpperRange
      promoterLowerRange
      __typename
    }
    defaultDateFilterRange
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="285 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q2a3b68b6&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;skipGetDimension&quot;:false},&quot;query&quot;:&quot;query q2a3b68b6($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $skipGetDimension: Boolean!) {\n  campaign(campaignId: $campaignId) @skip(if: $skipGetDimension) {\n    getDimensionAndUniqueAnswers(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n    )\n    __typename\n  }\n  getCampaignsEnabledForPrecalculation\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q2a3b68b6</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q2a3b68b6($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $skipGetDimension: Boolean!) {
  campaign(campaignId: $campaignId) @skip(if: $skipGetDimension) {
    getDimensionAndUniqueAnswers(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
    )
    __typename
  }
  getCampaignsEnabledForPrecalculation
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;skipGetDimension&quot;:false}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="287 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qaca85465&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query qaca85465($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    translations\n    enableBajajSpecificFeature\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qaca85465</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qaca85465($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    translations
    enableBajajSpecificFeature
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="286 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qy1gdo1&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]},&quot;overviewTabIsOpen&quot;:true},&quot;query&quot;:&quot;query qy1gdo1($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $segmentFilter: JSONObject, $overviewTabIsOpen: Boolean) {\n  getIncludedQuestionTypeForCampaign(campaignId: $campaignId)\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    escalationCount(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      segmentFilter: $segmentFilter\n      overviewTabIsOpen: $overviewTabIsOpen\n    ) {\n      openEscalation\n      closeEscalation\n      totalEscalation\n      __typename\n    }\n    translations\n    hasNetSatisfactionScoreQuestion\n    netSatisfactionScore(segmentFilter: $segmentFilter)\n    cesScoreMean(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n    )\n    hasCESQuestion\n    isEscalationConfigured\n    escalationNamePlural\n    numberOfResponses(segmentFilter: $segmentFilter)\n    netPromoterScore(segmentFilter: $segmentFilter) {\n      segment\n      count\n      __typename\n    }\n    type\n    benchmark {\n      id\n      industryName\n      averageNPS\n      topPerformerNPS\n      bottomPerformerNPS\n      bottomQuartile\n      medianQuartile\n      topQuartile\n      footNote\n      __typename\n    }\n    huddleConfiguration\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qy1gdo1</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qy1gdo1($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $segmentFilter: JSONObject, $overviewTabIsOpen: Boolean) {
  getIncludedQuestionTypeForCampaign(campaignId: $campaignId)
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    escalationCount(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      segmentFilter: $segmentFilter
      overviewTabIsOpen: $overviewTabIsOpen
    ) {
      openEscalation
      closeEscalation
      totalEscalation
      __typename
    }
    translations
    hasNetSatisfactionScoreQuestion
    netSatisfactionScore(segmentFilter: $segmentFilter)
    cesScoreMean(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
    )
    hasCESQuestion
    isEscalationConfigured
    escalationNamePlural
    numberOfResponses(segmentFilter: $segmentFilter)
    netPromoterScore(segmentFilter: $segmentFilter) {
      segment
      count
      __typename
    }
    type
    benchmark {
      id
      industryName
      averageNPS
      topPerformerNPS
      bottomPerformerNPS
      bottomQuartile
      medianQuartile
      topQuartile
      footNote
      __typename
    }
    huddleConfiguration
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]},&quot;overviewTabIsOpen&quot;:true}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="288 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;variables&quot;:{},&quot;query&quot;:&quot;{\n  getAllGlobalTransation\n}\n&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="289 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qaca85465&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query qaca85465($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    translations\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qaca85465</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qaca85465($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    translations
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="292 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query ($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject!) {\n  getIncludedQuestionTypeForCampaign(campaignId: $campaignId)\n  campaignCSIScore(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  )\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject!) {
  getIncludedQuestionTypeForCampaign(campaignId: $campaignId)
  campaignCSIScore(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  )
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="290 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qaf89a7c3&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query qaf89a7c3($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    netPromoterScoreMean(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n    )\n    isNPSmeanVisibleInOverview\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qaf89a7c3</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qaf89a7c3($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    netPromoterScoreMean(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
    )
    isNPSmeanVisibleInOverview
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="294 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qy0101bk&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query qy0101bk($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    benchmarkIndustry\n    translations\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qy0101bk</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qy0101bk($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    benchmarkIndustry
    translations
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="295 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    otpVerificationOverview(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      year\n      month\n      day\n      week\n      otpVerifiedCount\n      otpVerificationRate\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    otpVerificationOverview(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      year
      month
      day
      week
      otpVerifiedCount
      otpVerificationRate
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="293 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q64e445c4&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;filters&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query q64e445c4($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $filters: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    netPromoterScoreTrend(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      filters: $filters\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      promoters\n      passives\n      detractors\n      month\n      year\n      day\n      week\n      netPromoterScore\n      quarter\n      netSatisfactionScore\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q64e445c4</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q64e445c4($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $filters: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    netPromoterScoreTrend(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      filters: $filters
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      promoters
      passives
      detractors
      month
      year
      day
      week
      netPromoterScore
      quarter
      netSatisfactionScore
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;filters&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="296 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    callBackCount(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      timeZone: $timeZone\n      questionFilter: $questionFilter\n      segmentFilter: $segmentFilter\n    ) {\n      callbackpercent\n      perpetualpercent\n      callbackcount\n      year\n      month\n      day\n      week\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    callBackCount(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      timeZone: $timeZone
      questionFilter: $questionFilter
      segmentFilter: $segmentFilter
    ) {
      callbackpercent
      perpetualpercent
      callbackcount
      year
      month
      day
      week
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="291 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q7dd69152&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query q7dd69152($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    rollingNetPromoterScore(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      all\n      responseSubmissionDate\n      rollingNPS\n      rollingCount\n      rollingCSAT\n      __typename\n    }\n    rollingResponseCount(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      responseSubmissionDate\n      rollingDetractors\n      rollingPromoter\n      rollingPassives\n      rollingResponseCount\n      rollingCSAT\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q7dd69152</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q7dd69152($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    rollingNetPromoterScore(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      all
      responseSubmissionDate
      rollingNPS
      rollingCount
      rollingCSAT
      __typename
    }
    rollingResponseCount(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      responseSubmissionDate
      rollingDetractors
      rollingPromoter
      rollingPassives
      rollingResponseCount
      rollingCSAT
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="297 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    followUpLoopClosureChart(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      year\n      followuppercent\n      followupcount\n      month\n      day\n      week\n      loopClosureRateDenominator\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    followUpLoopClosureChart(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      year
      followuppercent
      followupcount
      month
      day
      week
      loopClosureRateDenominator
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="299 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    huddleTrendForLineChart(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      year\n      count\n      percent\n      month\n      day\n      week\n      huddleAchievementDenominator\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    huddleTrendForLineChart(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      year
      count
      percent
      month
      day
      week
      huddleAchievementDenominator
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="298 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    resolutionTrendChart(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      year\n      resolutionpercent\n      resolutioncount\n      month\n      day\n      week\n      agingDifference\n      resolutionRateDenominator\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    resolutionTrendChart(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      year
      resolutionpercent
      resolutioncount
      month
      day
      week
      agingDifference
      resolutionRateDenominator
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="300 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q58typ96&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;isWithOptions&quot;:true},&quot;query&quot;:&quot;query q58typ96($campaignId: ID!, $isWithOptions: Boolean) {\n  questionnaire(campaignId: $campaignId, isWithOptions: $isWithOptions)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q58typ96</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q58typ96($campaignId: ID!, $isWithOptions: Boolean) {
  questionnaire(campaignId: $campaignId, isWithOptions: $isWithOptions)
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;isWithOptions&quot;:true}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="301 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeNames&quot;:[],&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query ($campaignId: ID!, $pivotQuestionAttributeNames: [String!]!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  netPromoterScorePivot(\n    campaignId: $campaignId\n    pivotQuestionAttributeNames: $pivotQuestionAttributeNames\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    value\n    netPromoterScore\n    promoters\n    passives\n    detractors\n    all\n    netSatisfactionScore\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $pivotQuestionAttributeNames: [String!]!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  netPromoterScorePivot(
    campaignId: $campaignId
    pivotQuestionAttributeNames: $pivotQuestionAttributeNames
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    value
    netPromoterScore
    promoters
    passives
    detractors
    all
    netSatisfactionScore
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeNames&quot;:[],&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="303 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q64e302&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query q64e302($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $segmentFilter: JSONObject) {\n  callBackCountForChart(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    segmentFilter: $segmentFilter\n  )\n  languageCountForChart(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    segmentFilter: $segmentFilter\n  )\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q64e302</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q64e302($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $segmentFilter: JSONObject) {
  callBackCountForChart(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    segmentFilter: $segmentFilter
  )
  languageCountForChart(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    segmentFilter: $segmentFilter
  )
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="302 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qynpt01&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query qynpt01($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $segmentFilter: JSONObject) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    escalationCount(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      segmentFilter: $segmentFilter\n    ) {\n      openEscalation\n      closeEscalation\n      totalEscalation\n      __typename\n    }\n    responsetags {\n      id\n      tag\n      __typename\n    }\n    escalationNameSingular\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qynpt01</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qynpt01($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $segmentFilter: JSONObject) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    escalationCount(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      segmentFilter: $segmentFilter
    ) {
      openEscalation
      closeEscalation
      totalEscalation
      __typename
    }
    responsetags {
      id
      tag
      __typename
    }
    escalationNameSingular
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="304 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q05e4b7b2&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query q05e4b7b2($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    funnelDataForResponse(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      segmentFilter: $segmentFilter\n    ) {\n      linkSent\n      successfullyDelivered\n      visited\n      responded\n      failure\n      totalResponses\n      responseRate\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q05e4b7b2</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q05e4b7b2($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    funnelDataForResponse(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      segmentFilter: $segmentFilter
    ) {
      linkSent
      successfullyDelivered
      visited
      responded
      failure
      totalResponses
      responseRate
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="309 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query ($campaignId: ID!) {\n  getFlagshowNpsDistributionVariationByResponseRate(campaignId: $campaignId)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!) {
  getFlagshowNpsDistributionVariationByResponseRate(campaignId: $campaignId)
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="308 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q8f63a098&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;endDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1},&quot;query&quot;:&quot;query q8f63a098($campaignId: ID!, $pivotQuestionAttributeName: String!, $timeGroupUnit: TimelineGroups, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  netPromoterScorePivotDistributionScore(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    timeGroupUnit: $timeGroupUnit\n    rank: $rank\n    limit: $limit\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    value\n    score\n    all\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q8f63a098</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q8f63a098($campaignId: ID!, $pivotQuestionAttributeName: String!, $timeGroupUnit: TimelineGroups, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  netPromoterScorePivotDistributionScore(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    timeGroupUnit: $timeGroupUnit
    rank: $rank
    limit: $limit
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    value
    score
    all
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;endDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="310 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q25d123e3&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1},&quot;query&quot;:&quot;query q25d123e3($campaignId: ID!, $pivotQuestionAttributeName: String!, $timeGroupUnit: TimelineGroups, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String) {\n  netPromoterScorePivotTrend(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    timeGroupUnit: $timeGroupUnit\n    rank: $rank\n    limit: $limit\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    timeZone: $timeZone\n  ) {\n    value\n    netPromoterScore\n    day\n    week\n    month\n    quarter\n    year\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q25d123e3</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q25d123e3($campaignId: ID!, $pivotQuestionAttributeName: String!, $timeGroupUnit: TimelineGroups, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String) {
  netPromoterScorePivotTrend(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    timeGroupUnit: $timeGroupUnit
    rank: $rank
    limit: $limit
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    timeZone: $timeZone
  ) {
    value
    netPromoterScore
    day
    week
    month
    quarter
    year
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="311 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q447c1391&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1},&quot;query&quot;:&quot;query q447c1391($campaignId: ID!, $pivotQuestionAttributeName: String!, $timeGroupUnit: TimelineGroups, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  netPromoterScorePivotDistribution(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    timeGroupUnit: $timeGroupUnit\n    rank: $rank\n    limit: $limit\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    value\n    segment\n    count\n    __typename\n  }\n  netPromoterScorePivotDistributionScore(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    timeGroupUnit: $timeGroupUnit\n    rank: $rank\n    limit: $limit\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    value\n    score\n    all\n    totalResponses\n    responseRate\n    __typename\n  }\n  netSatisfactionScorePivotDistributionScore(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    timeGroupUnit: $timeGroupUnit\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    value\n    score\n    all\n    csiScore\n    totalResponses\n    responseRate\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q447c1391</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q447c1391($campaignId: ID!, $pivotQuestionAttributeName: String!, $timeGroupUnit: TimelineGroups, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  netPromoterScorePivotDistribution(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    timeGroupUnit: $timeGroupUnit
    rank: $rank
    limit: $limit
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    value
    segment
    count
    __typename
  }
  netPromoterScorePivotDistributionScore(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    timeGroupUnit: $timeGroupUnit
    rank: $rank
    limit: $limit
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    value
    score
    all
    totalResponses
    responseRate
    __typename
  }
  netSatisfactionScorePivotDistributionScore(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    timeGroupUnit: $timeGroupUnit
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    value
    score
    all
    csiScore
    totalResponses
    responseRate
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="315 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qaca85465&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query qaca85465($campaignId: ID!, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    huddleConfiguration\n    translations\n    type\n    netSatisfactionScore\n    metricConfig {\n      id\n      campaignId\n      rangeStart\n      rangeEnd\n      detractorUpperRange\n      promoterLowerRange\n      type\n      promoterLabel\n      detractorLabel\n      passiveLabel\n      metricLabel\n      metricLabelShort\n      __typename\n    }\n    netPromoterScore(segmentFilter: $segmentFilter) {\n      segment\n      count\n      __typename\n    }\n    chartsVisibility\n    enableBajajSpecificFeature\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qaca85465</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qaca85465($campaignId: ID!, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    huddleConfiguration
    translations
    type
    netSatisfactionScore
    metricConfig {
      id
      campaignId
      rangeStart
      rangeEnd
      detractorUpperRange
      promoterLowerRange
      type
      promoterLabel
      detractorLabel
      passiveLabel
      metricLabel
      metricLabelShort
      __typename
    }
    netPromoterScore(segmentFilter: $segmentFilter) {
      segment
      count
      __typename
    }
    chartsVisibility
    enableBajajSpecificFeature
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="317 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q365f6850&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query q365f6850($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject) {\n  satisfactionScoreDistribution(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    attributeName\n    segment\n    count\n    avgScore\n    inviteCount\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q365f6850</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q365f6850($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject) {
  satisfactionScoreDistribution(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    attributeName
    segment
    count
    avgScore
    inviteCount
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="320 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qa9rtdbff&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;ALL&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query qa9rtdbff($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject!, $pivotQuestionAttributeName: String!, $segmentFilter: JSONObject) {\n  rootCauseReasonCount(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    segmentFilter: $segmentFilter\n  )\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qa9rtdbff</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qa9rtdbff($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject!, $pivotQuestionAttributeName: String!, $segmentFilter: JSONObject) {
  rootCauseReasonCount(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    segmentFilter: $segmentFilter
  )
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;ALL&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="316 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q88fa3970&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;},&quot;query&quot;:&quot;query q88fa3970($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String) {\n  netSatisfactionScorePivotKeywords(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    timeZone: $timeZone\n  ) {\n    questionShortCode\n    questionStatement\n    questionId\n    segment\n    count\n    avgScore\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q88fa3970</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q88fa3970($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String) {
  netSatisfactionScorePivotKeywords(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    timeZone: $timeZone
  ) {
    questionShortCode
    questionStatement
    questionId
    segment
    count
    avgScore
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="321 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q0a5a335f&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;},&quot;query&quot;:&quot;query q0a5a335f($campaignId: ID!, $timeGroupUnit: TimelineGroups, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String) {\n  netSatisfactionScorePivotKeywords(\n    campaignId: $campaignId\n    timeGroupUnit: $timeGroupUnit\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    timeZone: $timeZone\n  ) {\n    questionShortCode\n    questionStatement\n    questionId\n    segment\n    count\n    avgScore\n    day\n    week\n    month\n    quarter\n    year\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q0a5a335f</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q0a5a335f($campaignId: ID!, $timeGroupUnit: TimelineGroups, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String) {
  netSatisfactionScorePivotKeywords(
    campaignId: $campaignId
    timeGroupUnit: $timeGroupUnit
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    timeZone: $timeZone
  ) {
    questionShortCode
    questionStatement
    questionId
    segment
    count
    avgScore
    day
    week
    month
    quarter
    year
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="318 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qa8tadbff&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;ALL&quot;},&quot;query&quot;:&quot;query qa8tadbff($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject!, $pivotQuestionAttributeName: String!) {\n  topL3Count(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n  )\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qa8tadbff</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qa8tadbff($campaignId: ID!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject!, $pivotQuestionAttributeName: String!) {
  topL3Count(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    pivotQuestionAttributeName: $pivotQuestionAttributeName
  )
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;ALL&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="319 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qa7eadbff&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;ALL&quot;},&quot;query&quot;:&quot;query qa7eadbff($campaignId: ID!, $pivotQuestionAttributeName: String, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  mcqAnswersFrequency(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  )\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qa7eadbff</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qa7eadbff($campaignId: ID!, $pivotQuestionAttributeName: String, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  mcqAnswersFrequency(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  )
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;ALL&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="324 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q352e0d9b&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query q352e0d9b($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    questionnaire\n    hasNetPromoterScoreQuestion\n    metricConfig {\n      id\n      campaignId\n      detractorUpperRange\n      promoterLowerRange\n      type\n      metricLabel\n      metricLabelShort\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q352e0d9b</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q352e0d9b($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    questionnaire
    hasNetPromoterScoreQuestion
    metricConfig {
      id
      campaignId
      detractorUpperRange
      promoterLowerRange
      type
      metricLabel
      metricLabelShort
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="325 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qaa637731&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;dataToShow&quot;:&quot;NPS&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1},&quot;query&quot;:&quot;query qaa637731($campaignId: ID!, $pivotQuestionAttributeName: String!, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $dataToShow: String!, $questionFilter: JSONObject) {\n  netSatisfactionScorePivotKeywordsAndDimension(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    rank: $rank\n    limit: $limit\n    startDate: $startDate\n    endDate: $endDate\n    dataToShow: $dataToShow\n    questionFilter: $questionFilter\n  ) {\n    attributeName\n    dimensionValue\n    netSatisfactionScore\n    overallNetSatisfactionScore\n    totalResponses\n    totalResponsesMetric\n    HIGHLY_SATISFIED\n    UNSATISFIED\n    overallNetPromoterScore\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qaa637731</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qaa637731($campaignId: ID!, $pivotQuestionAttributeName: String!, $rank: Rank, $limit: Int, $startDate: Date, $endDate: Date, $dataToShow: String!, $questionFilter: JSONObject) {
  netSatisfactionScorePivotKeywordsAndDimension(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    rank: $rank
    limit: $limit
    startDate: $startDate
    endDate: $endDate
    dataToShow: $dataToShow
    questionFilter: $questionFilter
  ) {
    attributeName
    dimensionValue
    netSatisfactionScore
    overallNetSatisfactionScore
    totalResponses
    totalResponsesMetric
    HIGHLY_SATISFIED
    UNSATISFIED
    overallNetPromoterScore
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;dataToShow&quot;:&quot;NPS&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;rank&quot;:&quot;top&quot;,&quot;limit&quot;:-1}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="328 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qc376a154&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;order&quot;:&quot;DESC&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query qc376a154($campaignId: ID!, $order: String, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $searchText: String) {\n  campaign(campaignId: $campaignId) {\n    topEngagedParticipants(\n      order: $order\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      searchText: $searchText\n    ) {\n      participantId\n      participantInfo\n      netSatisfactionScore\n      netPromoterScore\n      numberOfResponseSubmitted\n      __typename\n    }\n    translations\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qc376a154</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qc376a154($campaignId: ID!, $order: String, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $searchText: String) {
  campaign(campaignId: $campaignId) {
    topEngagedParticipants(
      order: $order
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      searchText: $searchText
    ) {
      participantId
      participantInfo
      netSatisfactionScore
      netPromoterScore
      numberOfResponseSubmitted
      __typename
    }
    translations
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;order&quot;:&quot;DESC&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="329 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qc22cb0af&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;order&quot;:&quot;DESC&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;searchText&quot;:&quot;&quot;,&quot;limit&quot;:10,&quot;offset&quot;:0},&quot;query&quot;:&quot;query qc22cb0af($campaignId: ID!, $order: String, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $searchText: String, $offset: Int, $limit: Int, $searchFilters: SearchFilters) {\n  campaign(campaignId: $campaignId) {\n    engagedParticipantsCount(\n      startDate: $startDate\n      endDate: $endDate\n      searchText: $searchText\n      questionFilter: $questionFilter\n      searchFilters: $searchFilters\n    )\n    topEngagedParticipants(\n      order: $order\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      searchText: $searchText\n      offset: $offset\n      limit: $limit\n      searchFilters: $searchFilters\n    ) {\n      participantId\n      participantInfo\n      netSatisfactionScore\n      netPromoterScore\n      numberOfResponseSubmitted\n      netCESScore\n      __typename\n    }\n    type\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qc22cb0af</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qc22cb0af($campaignId: ID!, $order: String, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $searchText: String, $offset: Int, $limit: Int, $searchFilters: SearchFilters) {
  campaign(campaignId: $campaignId) {
    engagedParticipantsCount(
      startDate: $startDate
      endDate: $endDate
      searchText: $searchText
      questionFilter: $questionFilter
      searchFilters: $searchFilters
    )
    topEngagedParticipants(
      order: $order
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      searchText: $searchText
      offset: $offset
      limit: $limit
      searchFilters: $searchFilters
    ) {
      participantId
      participantInfo
      netSatisfactionScore
      netPromoterScore
      numberOfResponseSubmitted
      netCESScore
      __typename
    }
    type
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;order&quot;:&quot;DESC&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;searchText&quot;:&quot;&quot;,&quot;limit&quot;:10,&quot;offset&quot;:0}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="330 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q1ee0a7c6&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query q1ee0a7c6($campaignId: ID!) {\n  campaign(campaignId: $campaignId) {\n    childrenCampaigns {\n      id\n      name\n      __typename\n    }\n    participantsFields {\n      fieldName\n      type\n      __typename\n    }\n    organizationId\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q1ee0a7c6</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q1ee0a7c6($campaignId: ID!) {
  campaign(campaignId: $campaignId) {
    childrenCampaigns {
      id
      name
      __typename
    }
    participantsFields {
      fieldName
      type
      __typename
    }
    organizationId
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="334 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query ($campaignId: ID!) {\n  getBulletPointStatus(campaignId: $campaignId)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!) {
  getBulletPointStatus(campaignId: $campaignId)
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="337 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query ($campaignId: ID!) {\n  getTextAnalysisStatus(campaignId: $campaignId)\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!) {
  getTextAnalysisStatus(campaignId: $campaignId)
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="335 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q564cef91&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;openQuFilter&quot;:[]},&quot;query&quot;:&quot;query q564cef91($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $openQuFilter: [String!]) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    delightScore(\n      questionFilter: $questionFilter\n      startDate: $startDate\n      endDate: $endDate\n      openQuFilter: $openQuFilter\n    ) {\n      good\n      bad\n      __typename\n    }\n    textAnalysisSentimentCount(\n      questionFilter: $questionFilter\n      startDate: $startDate\n      endDate: $endDate\n      openQuFilter: $openQuFilter\n    ) {\n      count\n      sentiment\n      __typename\n    }\n    textAnalysisL1Keywords(\n      questionFilter: $questionFilter\n      startDate: $startDate\n      endDate: $endDate\n      openQuFilter: $openQuFilter\n    ) {\n      keyword\n      frequency\n      l2Keywords {\n        veryBad\n        bad\n        neutral\n        good\n        veryGood\n        all\n        __typename\n      }\n      __typename\n    }\n    textAnalysisFunctions(\n      questionFilter: $questionFilter\n      startDate: $startDate\n      endDate: $endDate\n      openQuFilter: $openQuFilter\n    ) {\n      functions\n      frequency\n      functionSentiment {\n        veryBad\n        bad\n        neutral\n        good\n        veryGood\n        all\n        __typename\n      }\n      __typename\n    }\n    netPromoterScore {\n      segment\n      count\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q564cef91</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q564cef91($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $openQuFilter: [String!]) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    delightScore(
      questionFilter: $questionFilter
      startDate: $startDate
      endDate: $endDate
      openQuFilter: $openQuFilter
    ) {
      good
      bad
      __typename
    }
    textAnalysisSentimentCount(
      questionFilter: $questionFilter
      startDate: $startDate
      endDate: $endDate
      openQuFilter: $openQuFilter
    ) {
      count
      sentiment
      __typename
    }
    textAnalysisL1Keywords(
      questionFilter: $questionFilter
      startDate: $startDate
      endDate: $endDate
      openQuFilter: $openQuFilter
    ) {
      keyword
      frequency
      l2Keywords {
        veryBad
        bad
        neutral
        good
        veryGood
        all
        __typename
      }
      __typename
    }
    textAnalysisFunctions(
      questionFilter: $questionFilter
      startDate: $startDate
      endDate: $endDate
      openQuFilter: $openQuFilter
    ) {
      functions
      frequency
      functionSentiment {
        veryBad
        bad
        neutral
        good
        veryGood
        all
        __typename
      }
      __typename
    }
    netPromoterScore {
      segment
      count
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;openQuFilter&quot;:[]}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="336 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q5fbb6405&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query q5fbb6405($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    numberOfResponses\n    textAnalysisEntites\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q5fbb6405</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q5fbb6405($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    numberOfResponses
    textAnalysisEntites
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="338 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:null,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionId&quot;:[&quot;5f4380eb-06ad-4dcf-ab54-69e056eaefb1&quot;]},&quot;query&quot;:&quot;query ($campaignId: ID!, $startDate: Date, $endDate: Date, $questionId: [String!]) {\n  getWordCloudTextAnalysisData(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionId: $questionId\n  )\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.query">query ($campaignId: ID!, $startDate: Date, $endDate: Date, $questionId: [String!]) {
  getWordCloudTextAnalysisData(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionId: $questionId
  )
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionId&quot;:[&quot;5f4380eb-06ad-4dcf-ab54-69e056eaefb1&quot;]}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="339 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qba64f7a4&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;openQuFilter&quot;:[]},&quot;query&quot;:&quot;query qba64f7a4($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String, $openQuFilter: [String!]) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    netPromoterScoreKeywordsByTime(\n      startDate: $startDate\n      endDate: $endDate\n      timeZone: $timeZone\n      openQuFilter: $openQuFilter\n    ) {\n      all\n      keyword\n      functions\n      netPromoterScore\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qba64f7a4</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qba64f7a4($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String, $openQuFilter: [String!]) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    netPromoterScoreKeywordsByTime(
      startDate: $startDate
      endDate: $endDate
      timeZone: $timeZone
      openQuFilter: $openQuFilter
    ) {
      all
      keyword
      functions
      netPromoterScore
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;openQuFilter&quot;:[]}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="341 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q90831890&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;openQuFilter&quot;:[]},&quot;query&quot;:&quot;query q90831890($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeGroupUnit: TimelineGroups!, $timeZone: String, $openQuFilter: [String!]) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    netPromoterScoreByComments(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      timeZone: $timeZone\n      openQuFilter: $openQuFilter\n    ) {\n      all\n      keyword\n      functions\n      year\n      month\n      day\n      week\n      quarter\n      netPromoterScore\n      __typename\n    }\n    netPromoterScoreKeywordsByTime(\n      startDate: $startDate\n      endDate: $endDate\n      timeZone: $timeZone\n      openQuFilter: $openQuFilter\n    ) {\n      all\n      keyword\n      functions\n      netPromoterScore\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q90831890</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q90831890($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeGroupUnit: TimelineGroups!, $timeZone: String, $openQuFilter: [String!]) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    netPromoterScoreByComments(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      timeZone: $timeZone
      openQuFilter: $openQuFilter
    ) {
      all
      keyword
      functions
      year
      month
      day
      week
      quarter
      netPromoterScore
      __typename
    }
    netPromoterScoreKeywordsByTime(
      startDate: $startDate
      endDate: $endDate
      timeZone: $timeZone
      openQuFilter: $openQuFilter
    ) {
      all
      keyword
      functions
      netPromoterScore
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;week&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;openQuFilter&quot;:[]}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="340 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qba64f7a4&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;endDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;openQuFilter&quot;:[]},&quot;query&quot;:&quot;query qba64f7a4($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String, $openQuFilter: [String!]) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    netPromoterScoreKeywordsByTime(\n      startDate: $startDate\n      endDate: $endDate\n      timeZone: $timeZone\n      openQuFilter: $openQuFilter\n    ) {\n      all\n      keyword\n      functions\n      netPromoterScore\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qba64f7a4</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qba64f7a4($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $timeZone: String, $openQuFilter: [String!]) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    netPromoterScoreKeywordsByTime(
      startDate: $startDate
      endDate: $endDate
      timeZone: $timeZone
      openQuFilter: $openQuFilter
    ) {
      all
      keyword
      functions
      netPromoterScore
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;endDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;openQuFilter&quot;:[]}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="344 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q138ee249&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;daily&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;sortBy&quot;:&quot;ATTRIBUTE_VALUE&quot;,&quot;sortOrder&quot;:&quot;ASC&quot;,&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query q138ee249($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    distributionTemplates {\n      id\n      templateName\n      __typename\n    }\n    responseCountByTime(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      year\n      month\n      day\n      week\n      quarter\n      count\n      __typename\n    }\n    communicationsSentCountByTime(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      year\n      month\n      day\n      week\n      quarter\n      count\n      __typename\n    }\n    deliveryCountByTime(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      timeZone: $timeZone\n    ) {\n      year\n      month\n      day\n      week\n      quarter\n      count\n      __typename\n    }\n    isBajajSpecificFeatureEnabled\n    isThisALatamCampaign\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q138ee249</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q138ee249($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    distributionTemplates {
      id
      templateName
      __typename
    }
    responseCountByTime(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      year
      month
      day
      week
      quarter
      count
      __typename
    }
    communicationsSentCountByTime(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      year
      month
      day
      week
      quarter
      count
      __typename
    }
    deliveryCountByTime(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      timeZone: $timeZone
    ) {
      year
      month
      day
      week
      quarter
      count
      __typename
    }
    isBajajSpecificFeatureEnabled
    isThisALatamCampaign
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;daily&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;sortBy&quot;:&quot;ATTRIBUTE_VALUE&quot;,&quot;sortOrder&quot;:&quot;ASC&quot;,&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="346 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qa7eadb3g&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query qa7eadb3g($campaignId: ID!, $pivotQuestionAttributeName: String!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $segmentFilter: JSONObject) {\n  otpVerificationKPI(\n    campaignId: $campaignId\n    pivotQuestionAttributeName: $pivotQuestionAttributeName\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    segmentFilter: $segmentFilter\n  )\n  getCampaignsEnabledForPrecalculation\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qa7eadb3g</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qa7eadb3g($campaignId: ID!, $pivotQuestionAttributeName: String!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject, $segmentFilter: JSONObject) {
  otpVerificationKPI(
    campaignId: $campaignId
    pivotQuestionAttributeName: $pivotQuestionAttributeName
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    segmentFilter: $segmentFilter
  )
  getCampaignsEnabledForPrecalculation
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;pivotQuestionAttributeName&quot;:&quot;Dealer Name&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="345 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q54698497&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;daily&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;filters&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query q54698497($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $filters: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    scheduleSuccessTrend(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      filters: $filters\n      timeZone: $timeZone\n      segmentFilter: $segmentFilter\n    ) {\n      responded\n      visited\n      failure\n      likelyDelivered\n      successfullyDelivered\n      totalResponses\n      month\n      year\n      day\n      week\n      quarter\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q54698497</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q54698497($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $filters: JSONObject, $timeZone: String, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    scheduleSuccessTrend(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      filters: $filters
      timeZone: $timeZone
      segmentFilter: $segmentFilter
    ) {
      responded
      visited
      failure
      likelyDelivered
      successfullyDelivered
      totalResponses
      month
      year
      day
      week
      quarter
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;daily&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;filters&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;timeZone&quot;:&quot;-5:30&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="347 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q5501f8a5&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;daily&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;sortBy&quot;:&quot;RESPONSE_RATE&quot;,&quot;sortOrder&quot;:&quot;ASC&quot;,&quot;filter&quot;:&quot;Dealer Name&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query q5501f8a5($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $sortBy: String, $sortOrder: String, $filter: String!, $segmentFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    communicationsSentCountByAttributes(\n      timeGroupUnit: $timeGroupUnit\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n      filter: $filter\n      segmentFilter: $segmentFilter\n    ) {\n      attributeName\n      value\n      totalDeliveriesIrrespectiveOfReminders\n      totalCount\n      submittedResponse\n      responseRate\n      visited\n      WACount\n      SmsCount\n      EmailCount\n      responseratemethod\n      scheduled\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q5501f8a5</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q5501f8a5($campaignId: ID!, $timeGroupUnit: TimelineGroups!, $startDate: Date!, $endDate: Date!, $questionFilter: JSONObject, $sortBy: String, $sortOrder: String, $filter: String!, $segmentFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    communicationsSentCountByAttributes(
      timeGroupUnit: $timeGroupUnit
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
      sortBy: $sortBy
      sortOrder: $sortOrder
      filter: $filter
      segmentFilter: $segmentFilter
    ) {
      attributeName
      value
      totalDeliveriesIrrespectiveOfReminders
      totalCount
      submittedResponse
      responseRate
      visited
      WACount
      SmsCount
      EmailCount
      responseratemethod
      scheduled
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;timeGroupUnit&quot;:&quot;daily&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;sortBy&quot;:&quot;RESPONSE_RATE&quot;,&quot;sortOrder&quot;:&quot;ASC&quot;,&quot;filter&quot;:&quot;Dealer Name&quot;,&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="352 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;qa64546dc&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;limit&quot;:10,&quot;sortBy&quot;:&quot;BY_DATE&quot;,&quot;sortOrder&quot;:&quot;BY_DESC&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;globalSearchText&quot;:{},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}},&quot;query&quot;:&quot;query qa64546dc($campaignId: ID!, $startDate: Date, $endDate: Date, $limit: Int, $offset: Int, $sortBy: String!, $sortOrder: String!, $questionFilter: JSONObject, $globalSearchText: JSONObject, $searchFilters: SearchFilters, $segmentFilter: JSONObject) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n    globalSearchText: $globalSearchText\n    searchFilters: $searchFilters\n  ) {\n    translations\n    callerConfiguration\n    userRole\n    numberOfResponses(\n      segmentFilter: $segmentFilter\n      globalSearchText: $globalSearchText\n      searchFilters: $searchFilters\n    )\n    type\n    metricConfig {\n      id\n      campaignId\n      rangeStart\n      rangeEnd\n      detractorUpperRange\n      promoterLowerRange\n      type\n      promoterLabel\n      detractorLabel\n      passiveLabel\n      metricLabel\n      metricLabelShort\n      __typename\n    }\n    responses(\n      startDate: $startDate\n      endDate: $endDate\n      limit: $limit\n      offset: $offset\n      sortBy: $sortBy\n      sortOrder: $sortOrder\n      globalSearchText: $globalSearchText\n      searchFilters: $searchFilters\n    ) {\n      id\n      tags\n      campaignId\n      answers\n      participantInfo\n      createdAt\n      netSatisfactionScore\n      netPromoterScore\n      campaignName\n      __typename\n    }\n    responsetags {\n      id\n      tag\n      __typename\n    }\n    isRCIModuleEnabled\n    uniqueParticipantFieldsAtCampaignLevel\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">qa64546dc</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query qa64546dc($campaignId: ID!, $startDate: Date, $endDate: Date, $limit: Int, $offset: Int, $sortBy: String!, $sortOrder: String!, $questionFilter: JSONObject, $globalSearchText: JSONObject, $searchFilters: SearchFilters, $segmentFilter: JSONObject) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
    globalSearchText: $globalSearchText
    searchFilters: $searchFilters
  ) {
    translations
    callerConfiguration
    userRole
    numberOfResponses(
      segmentFilter: $segmentFilter
      globalSearchText: $globalSearchText
      searchFilters: $searchFilters
    )
    type
    metricConfig {
      id
      campaignId
      rangeStart
      rangeEnd
      detractorUpperRange
      promoterLowerRange
      type
      promoterLabel
      detractorLabel
      passiveLabel
      metricLabel
      metricLabelShort
      __typename
    }
    responses(
      startDate: $startDate
      endDate: $endDate
      limit: $limit
      offset: $offset
      sortBy: $sortBy
      sortOrder: $sortOrder
      globalSearchText: $globalSearchText
      searchFilters: $searchFilters
    ) {
      id
      tags
      campaignId
      answers
      participantInfo
      createdAt
      netSatisfactionScore
      netPromoterScore
      campaignName
      __typename
    }
    responsetags {
      id
      tag
      __typename
    }
    isRCIModuleEnabled
    uniqueParticipantFieldsAtCampaignLevel
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;limit&quot;:10,&quot;sortBy&quot;:&quot;BY_DATE&quot;,&quot;sortOrder&quot;:&quot;BY_DESC&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}},&quot;globalSearchText&quot;:{},&quot;segmentFilter&quot;:{&quot;segmentName&quot;:&quot;&quot;,&quot;segmentValue&quot;:[],&quot;allValues&quot;:[]}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="355 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q5bc84864&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}},&quot;query&quot;:&quot;query q5bc84864($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  campaign(campaignId: $campaignId) {\n    regressionAnalytics(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n    )\n    metricConfig {\n      rangeStart\n      rangeEnd\n      type\n      __typename\n    }\n    netPromoterScoreMean(\n      startDate: $startDate\n      endDate: $endDate\n      questionFilter: $questionFilter\n    )\n    netPromoterScore {\n      segment\n      count\n      __typename\n    }\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q5bc84864</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q5bc84864($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  campaign(campaignId: $campaignId) {
    regressionAnalytics(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
    )
    metricConfig {
      rangeStart
      rangeEnd
      type
      __typename
    }
    netPromoterScoreMean(
      startDate: $startDate
      endDate: $endDate
      questionFilter: $questionFilter
    )
    netPromoterScore {
      segment
      count
      __typename
    }
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;,&quot;startDate&quot;:&quot;2024-04-15T18:30:00.000Z&quot;,&quot;endDate&quot;:&quot;2024-05-15T18:29:59.999Z&quot;,&quot;questionFilter&quot;:{&quot;questionFilter&quot;:{},&quot;npsScoreFilter&quot;:{&quot;id&quot;:&quot;470fe5cc-723a-41d0-837c-b10402b93121&quot;,&quot;values&quot;:[&quot;PROMOTER&quot;,&quot;PASSIVE&quot;,&quot;DETRACTOR&quot;,&quot;--ALL--&quot;]},&quot;responseType&quot;:{&quot;id&quot;:&quot;&quot;,&quot;values&quot;:[&quot;SUBMIT&quot;,&quot;PARTIAL&quot;,&quot;--ALL--&quot;]}}}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="GraphQLHTTPSamplerGui" testclass="HTTPSamplerProxy" testname="356 - /api/graphql/ ()">
              <stringProp name="HTTPSampler.domain">idfc-api.zykrr.com</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/api/graphql/</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument" enabled="true">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;operationName&quot;:&quot;q2a3b68b5&quot;,&quot;variables&quot;:{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;},&quot;query&quot;:&quot;query q2a3b68b5($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {\n  campaign(\n    campaignId: $campaignId\n    startDate: $startDate\n    endDate: $endDate\n    questionFilter: $questionFilter\n  ) {\n    hasNetPromoterScoreQuestion\n    metricConfig {\n      id\n      campaignId\n      type\n      promoterLabel\n      detractorLabel\n      passiveLabel\n      metricLabel\n      metricLabelShort\n      rangeEnd\n      rangeStart\n      detractorUpperRange\n      promoterLowerRange\n      __typename\n    }\n    defaultDateFilterRange\n    __typename\n  }\n}&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="GraphQLHTTPSampler.operationName">q2a3b68b5</stringProp>
              <stringProp name="GraphQLHTTPSampler.query">query q2a3b68b5($campaignId: ID!, $startDate: Date, $endDate: Date, $questionFilter: JSONObject) {
  campaign(
    campaignId: $campaignId
    startDate: $startDate
    endDate: $endDate
    questionFilter: $questionFilter
  ) {
    hasNetPromoterScoreQuestion
    metricConfig {
      id
      campaignId
      type
      promoterLabel
      detractorLabel
      passiveLabel
      metricLabel
      metricLabelShort
      rangeEnd
      rangeStart
      detractorUpperRange
      promoterLowerRange
      __typename
    }
    defaultDateFilterRange
    __typename
  }
}
</stringProp>
              <stringProp name="GraphQLHTTPSampler.variables">{&quot;campaignId&quot;:&quot;e58da119-ccde-40aa-b926-439bb891a5b6&quot;}</stringProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Sec-Fetch-Mode" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Mode</stringProp>
                    <stringProp name="Header.value">cors</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}/</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-name" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-name</stringProp>
                    <stringProp name="Header.value">insights</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Site" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Site</stringProp>
                    <stringProp name="Header.value">same-site</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${scheme}://${host}</stringProp>
                  </elementProp>
                  <elementProp name="Priority" elementType="Header">
                    <stringProp name="Header.name">Priority</stringProp>
                    <stringProp name="Header.value">u=4</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="apollographql-client-version" elementType="Header">
                    <stringProp name="Header.name">apollographql-client-version</stringProp>
                    <stringProp name="Header.value">3.0.0</stringProp>
                  </elementProp>
                  <elementProp name="content-type" elementType="Header">
                    <stringProp name="Header.name">content-type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br, zstd</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:126.0) Gecko/20100101 Firefox/126.0</stringProp>
                  </elementProp>
                  <elementProp name="Sec-Fetch-Dest" elementType="Header">
                    <stringProp name="Header.name">Sec-Fetch-Dest</stringProp>
                    <stringProp name="Header.value">empty</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">cookie</stringProp>
                    <stringProp name="Header.value">zykrr=${token}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>true</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
          </value>
        </objProp>
        <stringProp name="filename">Navigateall_flow.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ProxyControl guiclass="ProxyControlGui" testclass="ProxyControl" testname="HTTP(S) Test Script Recorder">
        <stringProp name="ProxyControlGui.port">8888</stringProp>
        <collectionProp name="ProxyControlGui.exclude_list">
          <stringProp name="1179605444">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)</stringProp>
          <stringProp name="-88591710">www\.download\.windowsupdate\.com.*</stringProp>
          <stringProp name="1323576868">toolbarqueries\.google\..*</stringProp>
          <stringProp name="1629558731">clients.*\.google.*</stringProp>
          <stringProp name="-1899150273">api\.bing\.com.*</stringProp>
          <stringProp name="305776760">(?i).*\.(bmp|css|js|gif|ico|jpe?g|png|swf|eot|otf|ttf|mp4|woff|woff2)[\?;].*</stringProp>
          <stringProp name="1779943373">us\.update\.toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="1815174768">safebrowsing.*\.google\.com.*</stringProp>
          <stringProp name="587935979">g\.msn.*</stringProp>
          <stringProp name="110431874">.*msg\.yahoo\.com.*</stringProp>
          <stringProp name="1206954446">tiles.*\.mozilla\.com.*</stringProp>
          <stringProp name="-1314416226">sqm\.microsoft\.com.*</stringProp>
          <stringProp name="1726898318">geo\.yahoo\.com.*</stringProp>
          <stringProp name="-192420923">.*yimg\.com.*</stringProp>
          <stringProp name="2118375536">www\.google-analytics\.com.*</stringProp>
          <stringProp name="1739087931">http?://self-repair\.mozilla\.org.*</stringProp>
          <stringProp name="805311387">windowsupdate\.microsoft\.com.*</stringProp>
          <stringProp name="-1424663473">.*detectportal\.firefox\.com.*</stringProp>
          <stringProp name="11072252">.*toolbar\.yahoo\.com.*</stringProp>
          <stringProp name="-190610036">.*\.google\.com.*/safebrowsing/.*</stringProp>
          <stringProp name="-958112859">toolbar\.google\.com.*</stringProp>
          <stringProp name="-1279148329">pgq\.yahoo\.com.*</stringProp>
          <stringProp name="-1435252351">toolbar\.avg\.com/.*</stringProp>
          <stringProp name="-576820688">toolbar\.msn\.com.*</stringProp>
        </collectionProp>
        <collectionProp name="ProxyControlGui.include_list"/>
        <boolProp name="ProxyControlGui.capture_http_headers">true</boolProp>
        <intProp name="ProxyControlGui.grouping_mode">4</intProp>
        <boolProp name="ProxyControlGui.add_assertion">false</boolProp>
        <stringProp name="ProxyControlGui.sampler_type_name"></stringProp>
        <boolProp name="ProxyControlGui.sampler_redirect_automatically">false</boolProp>
        <boolProp name="ProxyControlGui.sampler_follow_redirects">true</boolProp>
        <boolProp name="ProxyControlGui.use_keepalive">true</boolProp>
        <boolProp name="ProxyControlGui.sampler_download_images">false</boolProp>
        <boolProp name="ProxyControlGui.regex_match">true</boolProp>
        <stringProp name="ProxyControlGui.content_type_include"></stringProp>
        <stringProp name="ProxyControlGui.content_type_exclude"></stringProp>
        <boolProp name="ProxyControlGui.notify_child_sl_filtered">false</boolProp>
        <stringProp name="ProxyControlGui.proxy_prefix_http_sampler_name"></stringProp>
        <intProp name="ProxyControlGui.proxy_http_sampler_naming_mode">3</intProp>
        <stringProp name="ProxyControlGui.proxy_pause_http_sampler"></stringProp>
        <boolProp name="ProxyControlGui.detect_graphql_request">true</boolProp>
        <stringProp name="ProxyControlGui.default_encoding">UTF-8</stringProp>
        <stringProp name="ProxyControlGui.domains">idfc-insights.zykrr.com</stringProp>
      </ProxyControl>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>true</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">recording.xml</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
